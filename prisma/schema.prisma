// Enhanced Prisma Schema - prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Registration {
  id           String  @id @default(cuid())
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  email        String  @unique
  phone        String
  idCardNumber String  @unique @map("id_card_number")
  isEmsClient  Boolean @default(false) @map("is_ems_client")

  // For EMS Clients
  companyName    String? @map("company_name")
  emsCustomerId  String? @map("ems_customer_id")
  accountManager String? @map("account_manager")

  // Registration Status
  status         RegistrationStatus @default(PENDING)
  adminNotes     String?            @map("admin_notes")
  verifiedAt     DateTime?          @map("verified_at")
  verifiedBy     String?            @map("verified_by")
  rejectedReason String?            @map("rejected_reason")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations - UPDATED: Changed from ticket? to tickets[]
  tickets        Ticket[] // One registration can have multiple tickets
  payment        Payment?
  panelInterests PanelInterest[]
  emailLogs      EmailLog[]

  @@map("registrations")
}

model Ticket {
  id             String  @id @default(cuid())
  registrationId String  @map("registration_id") // REMOVED @unique to allow multiple tickets
  ticketNumber   String  @unique @map("ticket_number")
  qrCode         String  @unique @map("qr_code")
  pdfUrl         String? @map("pdf_url")

  // Ticket Status
  status      TicketStatus @default(GENERATED)
  issuedAt    DateTime     @default(now()) @map("issued_at")
  sentAt      DateTime?    @map("sent_at")
  collectedAt DateTime?    @map("collected_at")
  collectedBy String?      @map("collected_by")

  // Timestamps - ADDED
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Event Details
  eventDate     DateTime @map("event_date")
  venue         String   @default("Malta Fairs and Conventions Centre")
  boothLocation String   @default("EMS Booth - MFCC") @map("booth_location")

  // Access Level
  accessType AccessType @default(VIP) @map("access_type") // Changed default to VIP

  // Ticket Sequence - ADDED for ordering multiple tickets
  ticketSequence Int @default(1) @map("ticket_sequence") // 1st ticket, 2nd ticket, etc.

  // Relations
  registration Registration    @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  checkIns     TicketCheckIn[]

  @@map("tickets")
}

model Payment {
  id             String @id @default(cuid())
  registrationId String @unique @map("registration_id")

  // Payment Details
  stripePaymentId String @unique @map("stripe_payment_id")
  amount          Int // Amount in cents
  currency        String @default("EUR")

  // Payment Status
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?     @map("paid_at")
  refundedAt   DateTime?     @map("refunded_at")
  refundAmount Int?          @map("refund_amount")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PanelInterest {
  id             String @id @default(cuid())
  registrationId String @map("registration_id")

  panelType       String        @map("panel_type")
  interestLevel   InterestLevel @map("interest_level")
  estimatedBudget String?       @map("estimated_budget")
  timeframe       String? // When they plan to purchase
  notes           String?

  // Lead Management
  status        LeadStatus @default(NEW)
  assignedTo    String?    @map("assigned_to")
  followUpDate  DateTime?  @map("follow_up_date")
  lastContactAt DateTime?  @map("last_contact_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("panel_interests")
}

model TicketCheckIn {
  id       String @id @default(cuid())
  ticketId String @map("ticket_id")

  checkedInAt DateTime @default(now()) @map("checked_in_at")
  checkedInBy String   @map("checked_in_by") // Admin who checked them in
  location    String   @default("EMS Booth") // Where they checked in
  notes       String? // Any notes about the check-in

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_check_ins")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      AdminRole @default(ADMIN)
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  isActive  Boolean   @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admin_users")
}

model EmailLog {
  id             String  @id @default(cuid())
  registrationId String? @map("registration_id")

  emailType    EmailType @map("email_type")
  subject      String
  recipient    String
  templateUsed String?   @map("template_used")

  status       EmailStatus
  sentAt       DateTime    @default(now()) @map("sent_at")
  openedAt     DateTime?   @map("opened_at")
  clickedAt    DateTime?   @map("clicked_at")
  errorMessage String?     @map("error_message")

  // Relations
  registration Registration? @relation(fields: [registrationId], references: [id], onDelete: SetNull)

  @@map("email_logs")
}

model EventSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("event_settings")
}

// Enums
enum RegistrationStatus {
  PENDING // Waiting for admin approval (EMS clients only)
  VERIFIED // Approved by admin
  REJECTED // Rejected by admin
  PAYMENT_PENDING // Non-EMS clients who need to pay
  COMPLETED // Registration complete (paid or approved)
}

enum TicketStatus {
  GENERATED // Ticket created but not sent
  SENT // Ticket emailed to customer
  COLLECTED // Customer collected physical ticket at booth
  USED // Ticket scanned/used for entry
  EXPIRED // Ticket expired
  CANCELLED // Ticket cancelled
}

enum PaymentStatus {
  PENDING // Payment initiated but not completed
  SUCCEEDED // Payment successful
  FAILED // Payment failed
  CANCELLED // Payment cancelled
  REFUNDED // Payment refunded
}

enum AccessType {
  STANDARD // Regular access
  VIP // VIP access with additional benefits
  PRESS // Press/Media access
  EXHIBITOR // Exhibitor access
}

enum InterestLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CONVERTED
  LOST
  CLOSED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  BOOTH_STAFF
  SALES_MANAGER
}

enum EmailType {
  REGISTRATION_CONFIRMATION
  ADMIN_APPROVAL_NEEDED
  REGISTRATION_APPROVED
  REGISTRATION_REJECTED
  PAYMENT_REQUIRED
  PAYMENT_CONFIRMATION
  TICKET_DELIVERY
  EVENT_REMINDER
  PANEL_FOLLOWUP
  CHECK_IN_CONFIRMATION
}

enum EmailStatus {
  SENT
  FAILED
  OPENED
  CLICKED
  BOUNCED
}
