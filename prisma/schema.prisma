// Enhanced Prisma Schema - prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Registration {
  id           String  @id @default(cuid())
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  email        String  @unique
  phone        String
  idCardNumber String  @unique @map("id_card_number")
  isEmsClient  Boolean @default(false) @map("is_ems_client")

  // For EMS Clients - UPDATED FIELDS
  customerName      String?   @map("customer_name")
  orderNumber       String?   @map("order_number")
  applicationNumber String?   @map("application_number")
  orderDate         DateTime? @map("order_date")

  // Registration Status
  status         RegistrationStatus @default(PENDING)
  adminNotes     String?            @map("admin_notes")
  verifiedAt     DateTime?          @map("verified_at")
  verifiedBy     String?            @map("verified_by")
  rejectedReason String?            @map("rejected_reason")

  // Enhanced Pricing & Coupons
  originalAmount    Int     @default(0) @map("original_amount") // in cents
  discountAmount    Int     @default(0) @map("discount_amount") // in cents
  finalAmount       Int     @default(0) @map("final_amount") // in cents
  appliedCouponCode String? @map("applied_coupon_code")
  appliedCouponId   String? @map("applied_coupon_id")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tickets        Ticket[]
  payment        Payment?
  panelInterests PanelInterest[]
  emailLogs      EmailLog[]
  appliedCoupon  Coupon?         @relation(fields: [appliedCouponId], references: [id])

  @@map("registrations")
}

model Ticket {
  id             String  @id @default(cuid())
  registrationId String  @map("registration_id")
  ticketTypeId   String  @map("ticket_type_id")
  pricingTierId  String? @map("pricing_tier_id") // ✅ NEW: Which tier was selected

  ticketNumber   String  @unique @map("ticket_number")
  ticketSequence Int?    @map("ticket_sequence")
  qrCode         String  @unique @map("qr_code")
  pdfUrl         String? @map("pdf_url")

  // Ticket Status
  status      TicketStatus @default(GENERATED)
  issuedAt    DateTime     @default(now()) @map("issued_at")
  sentAt      DateTime?    @map("sent_at")
  collectedAt DateTime?    @map("collected_at")
  collectedBy String?      @map("collected_by")

  // Pricing at time of purchase
  purchasePrice Int   @map("purchase_price") // Actual price paid
  tierInfo      Json? @map("tier_info") // ✅ NEW: Store tier details at purchase time

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Event Details
  eventDate     DateTime @map("event_date")
  venue         String   @default("Malta Fairs and Conventions Centre")
  boothLocation String   @default("EMS Booth - MFCC") @map("booth_location")

  // Relations
  registration Registration    @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  ticketType   TicketType      @relation(fields: [ticketTypeId], references: [id])
  pricingTier  PricingTier?    @relation(fields: [pricingTierId], references: [id]) // ✅ NEW
  checkIns     TicketCheckIn[]

  @@map("tickets")
}

// STEP 1: Updated Prisma Schema - Add to your existing schema.prisma

model TicketType {
  id          String  @id @default(cuid())
  name        String // e.g., "VR Experience", "Magic Show"
  description String?
  category    String?

  // ✅ NEW: Pricing System
  pricingType PricingType @default(FIXED) @map("pricing_type")

  // For FIXED pricing (existing system)
  priceInCents Int @map("price_in_cents")

  // For TIERED pricing (new system)
  hasTieredPricing Boolean @default(false) @map("has_tiered_pricing")
  basePrice        Int?    @map("base_price") // Base price for calculating savings

  currency String @default("EUR")

  // Stock Management (keep existing)
  totalStock     Int @default(0) @map("total_stock")
  reservedStock  Int @default(0) @map("reserved_stock")
  soldStock      Int @default(0) @map("sold_stock")
  availableStock Int @default(0) @map("available_stock")

  // Availability (keep existing)
  isActive       Boolean   @default(true) @map("is_active")
  availableFrom  DateTime? @map("available_from")
  availableUntil DateTime? @map("available_until")
  maxPerOrder    Int       @default(10) @map("max_per_order")
  minPerOrder    Int       @default(1) @map("min_per_order")

  // Target Audience (keep existing)
  emsClientsOnly Boolean @default(false) @map("ems_clients_only")
  publicOnly     Boolean @default(false) @map("public_only")

  // Display & Sorting (keep existing)
  sortOrder Int     @default(0) @map("sort_order")
  imageUrl  String? @map("image_url")
  featured  Boolean @default(false)
  tags      String?

  // Admin Info (keep existing)
  createdBy String  @map("created_by")
  notes     String?

  // Timestamps (keep existing)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tickets      Ticket[]
  pricingTiers PricingTier[] // ✅ NEW: One-to-many relation with pricing tiers

  @@map("ticket_types")
}

// ✅ NEW: PricingTier model for flexible pricing options
model PricingTier {
  id           String @id @default(cuid())
  ticketTypeId String @map("ticket_type_id")

  // Tier Details
  name        String // e.g., "Single", "Double Pack", "Mega Pack"
  description String? // e.g., "Best value - Save €35!"

  // Pricing
  priceInCents Int @map("price_in_cents") // €10 = 1000 cents
  ticketCount  Int @map("ticket_count") // Number of tickets you get

  // Calculated Fields (for easy querying)
  pricePerTicket Int   @map("price_per_ticket") // Calculated: priceInCents / ticketCount
  savingsAmount  Int   @map("savings_amount") // Calculated savings in cents
  savingsPercent Float @map("savings_percent") // Calculated savings percentage

  // Display
  sortOrder Int     @default(0) @map("sort_order")
  isPopular Boolean @default(false) @map("is_popular")
  isActive  Boolean @default(true) @map("is_active")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ticketType TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  tickets    Ticket[] // Track which tier was selected

  @@map("pricing_tiers")
}

// ✅ UPDATED: Ticket model to track tier selection

// ✅ NEW: Pricing type enum
enum PricingType {
  FIXED // Traditional: €10 = 1 ticket
  TIERED // New: €3 = 1 ticket, €4 = 2 tickets, €10 = 15 tickets
}

model Payment {
  id             String @id @default(cuid())
  registrationId String @unique @map("registration_id")

  // Payment Details
  stripePaymentId String @unique @map("stripe_payment_id")
  amount          Int // Amount in cents (final amount after discounts)
  originalAmount  Int    @map("original_amount") // Original amount before discounts
  discountAmount  Int    @default(0) @map("discount_amount") // Discount applied
  currency        String @default("EUR")

  // Payment Status
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?     @map("paid_at")
  refundedAt   DateTime?     @map("refunded_at")
  refundAmount Int?          @map("refund_amount")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Coupon {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  // Discount Configuration
  discountType   DiscountType @map("discount_type")
  discountValue  Int          @map("discount_value")
  minOrderAmount Int?         @map("min_order_amount")

  // Usage Limits
  maxUses        Int? @map("max_uses")
  maxUsesPerUser Int? @default(1) @map("max_uses_per_user")
  currentUses    Int  @default(0) @map("current_uses")

  // Validity
  isActive  Boolean   @default(true) @map("is_active")
  validFrom DateTime  @map("valid_from")
  validTo   DateTime? @map("valid_to")

  // Target Audience
  emsClientsOnly Boolean @default(false) @map("ems_clients_only")
  publicOnly     Boolean @default(false) @map("public_only")

  // Applicable Ticket Types (JSON array of ticket type IDs)
  applicableTicketTypes String? @map("applicable_ticket_types")

  // Admin Info
  createdBy String  @map("created_by")
  notes     String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registrations Registration[]

  @@map("coupons")
}

model PanelInterest {
  id             String @id @default(cuid())
  registrationId String @map("registration_id")

  panelType       String        @map("panel_type")
  interestLevel   InterestLevel @map("interest_level")
  estimatedBudget String?       @map("estimated_budget")
  timeframe       String?
  notes           String?

  // Lead Management
  status        LeadStatus @default(NEW)
  assignedTo    String?    @map("assigned_to")
  followUpDate  DateTime?  @map("follow_up_date")
  lastContactAt DateTime?  @map("last_contact_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("panel_interests")
}

model TicketCheckIn {
  id       String @id @default(cuid())
  ticketId String @map("ticket_id")

  checkedInAt DateTime @default(now()) @map("checked_in_at")
  checkedInBy String   @map("checked_in_by")
  location    String   @default("EMS Booth")
  notes       String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_check_ins")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      AdminRole @default(ADMIN)
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  isActive  Boolean   @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admin_users")
}

model EmailLog {
  id             String  @id @default(cuid())
  registrationId String? @map("registration_id")

  emailType    EmailType @map("email_type")
  subject      String
  recipient    String
  templateUsed String?   @map("template_used")

  status       EmailStatus
  sentAt       DateTime    @default(now()) @map("sent_at")
  openedAt     DateTime?   @map("opened_at")
  clickedAt    DateTime?   @map("clicked_at")
  errorMessage String?     @map("error_message")

  // Relations
  registration Registration? @relation(fields: [registrationId], references: [id], onDelete: SetNull)

  @@map("email_logs")
}

model EventSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("event_settings")
}

// Enums
enum RegistrationStatus {
  PENDING
  VERIFIED
  REJECTED
  PAYMENT_PENDING
  COMPLETED
}

enum TicketStatus {
  GENERATED
  SENT
  COLLECTED
  USED
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum InterestLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CONVERTED
  LOST
  CLOSED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  BOOTH_STAFF
  SALES_MANAGER
}

enum EmailType {
  REGISTRATION_CONFIRMATION
  ADMIN_APPROVAL_NEEDED
  REGISTRATION_APPROVED
  REGISTRATION_REJECTED
  PAYMENT_REQUIRED
  PAYMENT_CONFIRMATION
  TICKET_DELIVERY
  EVENT_REMINDER
  PANEL_FOLLOWUP
  CHECK_IN_CONFIRMATION
  COUPON_APPLIED
}

enum EmailStatus {
  SENT
  FAILED
  OPENED
  CLICKED
  BOUNCED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
