// src/app/registration/pending/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Skeleton } from '@/components/ui/skeleton'
import { Clock, CheckCircle, Mail, Phone, AlertCircle, Home, Zap, Copy, Ticket } from 'lucide-react'
import Link from 'next/link'
import { toast } from '@/components/ui/use-toast'

interface RegistrationData {
  id: string
  firstName: string
  lastName: string
  email: string
  phone: string
  isEmsClient: boolean
  status: string
  createdAt: string
  customerName?: string
  emsCustomerId?: string
  panelInterest: boolean
  ticket?: {
    ticketNumber: string
    status: string
    qrCode: string
    issuedAt: string
  }
}

export default function PendingApprovalPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const registrationId = searchParams.get('id')
  
  const [registration, setRegistration] = useState<RegistrationData | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (registrationId) {
      fetchRegistration()
    } else {
      router.push('/register')
    }
  }, [registrationId, router])

  const fetchRegistration = async () => {
    try {
      const response = await fetch(`/api/registrations/${registrationId}`)
      const result = await response.json()
      
      if (result.success) {
        setRegistration({
          id: result.data.id,
          firstName: result.data.firstName,
          lastName: result.data.lastName,
          email: result.data.email,
          phone: result.data.phone,
          isEmsClient: result.data.isEmsClient,
          status: result.data.status,
          createdAt: result.data.createdAt,
          customerName: result.data.customerName || result.data.companyName,
          emsCustomerId: result.data.emsCustomerId,
          panelInterest: result.data.panelInterests && result.data.panelInterests.length > 0,
          ticket: result.data.ticket ? {
            ticketNumber: result.data.ticket.ticketNumber,
            status: result.data.ticket.status,
            qrCode: result.data.ticket.qrCode,
            issuedAt: result.data.ticket.issuedAt
          } : undefined
        })
      } else {
        router.push('/register')
      }
    } catch (error) {
      console.error('Error fetching registration:', error)
      router.push('/register')
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: "Copied!",
        description: `${label} copied to clipboard`,
      })
    })
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PENDING':
        return 'bg-orange-50 border-orange-200 text-orange-800'
      case 'COMPLETED':
        return 'bg-green-50 border-green-200 text-green-800'
      case 'REJECTED':
        return 'bg-red-50 border-red-200 text-red-800'
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800'
    }
  }

  const getTicketStatusBadge = (status: string) => {
    switch (status) {
      case 'GENERATED':
        return <Badge variant="secondary">Generated</Badge>
      case 'SENT':
        return <Badge className="bg-blue-100 text-blue-800">Sent to Email</Badge>
      case 'COLLECTED':
        return <Badge className="bg-green-100 text-green-800">Collected</Badge>
      case 'USED':
        return <Badge className="bg-purple-100 text-purple-800">Used</Badge>
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
        <div className="container mx-auto px-4">
          <Card className="w-full max-w-2xl mx-auto">
            <CardHeader>
              <Skeleton className="h-6 w-48" />
              <Skeleton className="h-4 w-64" />
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Array.from({ length: 5 }).map((_, i) => (
                  <Skeleton key={i} className="h-12 w-full" />
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  if (!registration) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-bold mb-2">Registration Not Found</h2>
            <p className="text-gray-600 mb-4">The registration could not be found.</p>
            <Link href="/register">
              <Button>Back to Registration</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12">
      <div className="container mx-auto px-4">
        <Card className="w-full max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle className="text-2xl text-center flex items-center justify-center gap-2">
              <Clock className="h-6 w-6 text-orange-500" />
              Registration Status
            </CardTitle>
            <CardDescription className="text-center">
              Your EMS customer registration details and current status
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {/* Status Banner */}
            <div className={`p-4 border rounded-lg ${getStatusColor(registration.status)}`}>
              <div className="flex items-center gap-3">
                <Clock className="h-5 w-5" />
                <div>
                  <h3 className="font-medium">
                    {registration.status === 'PENDING' && 'Awaiting Admin Approval'}
                    {registration.status === 'COMPLETED' && 'Registration Approved'}
                    {registration.status === 'REJECTED' && 'Registration Rejected'}
                  </h3>
                  <p className="text-sm">
                    {registration.status === 'PENDING' && 'We\'re verifying your EMS customer status and will notify you once approved.'}
                    {registration.status === 'COMPLETED' && 'Your registration has been approved and your ticket is ready.'}
                    {registration.status === 'REJECTED' && 'Unfortunately, your registration could not be verified.'}
                  </p>
                </div>
              </div>
            </div>

            {/* Ticket Information */}
            {registration.ticket && (
              <div className="p-4 border rounded-lg bg-green-50 border-green-200">
                <h3 className="font-medium mb-3 flex items-center gap-2">
                  <Ticket className="h-4 w-4 text-green-600" />
                  Your Ticket
                </h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-white rounded-lg border">
                    <div>
                      <p className="text-sm text-gray-600">Ticket Number</p>
                      <p className="font-mono text-lg font-bold">{registration.ticket.ticketNumber}</p>
                    </div>
                    <div className="flex items-center gap-2">
                      {getTicketStatusBadge(registration.ticket.status)}
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(registration.ticket!.ticketNumber, 'Ticket number')}
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                  
                  <div className="text-sm text-green-800">
                    <p><strong>Generated:</strong> {new Date(registration.ticket.issuedAt).toLocaleDateString()} at {new Date(registration.ticket.issuedAt).toLocaleTimeString()}</p>
                    {registration.ticket.status === 'SENT' && (
                      <p className="mt-1">âœ“ Ticket has been sent to your email address</p>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Registration Details */}
            <div className="p-4 border rounded-lg bg-gray-50">
              <h3 className="font-medium mb-3">Registration Details</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="space-y-2">
                  <div>
                    <span className="text-gray-600">Name:</span>
                    <p className="font-medium">{registration.firstName} {registration.lastName}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">Email:</span>
                    <p className="font-medium">{registration.email}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">Phone:</span>
                    <p className="font-medium">{registration.phone}</p>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div>
                    <span className="text-gray-600">Registration ID:</span>
                    <div className="flex items-center gap-2">
                      <p className="font-mono text-xs">{registration.id}</p>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(registration.id, 'Registration ID')}
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                  <div>
                    <span className="text-gray-600">Submitted:</span>
                    <p className="font-medium">{new Date(registration.createdAt).toLocaleDateString()}</p>
                  </div>
                  <div>
                    <span className="text-gray-600">Customer Type:</span>
                    <p className="font-medium">EMS Customer</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Panel Interest */}
            {registration.panelInterest && (
              <div className="p-4 border rounded-lg bg-purple-50">
                <h3 className="font-medium mb-2 flex items-center gap-2">
                  <Zap className="h-4 w-4 text-purple-600" />
                  Solar Panel Interest
                </h3>
                <p className="text-sm text-purple-800">
                  You've expressed interest in EMS solar panels. Our experts will be prepared to discuss 
                  your requirements when you visit our booth at the trade fair.
                </p>
              </div>
            )}

            {/* Event Information */}
            <div className="p-4 border rounded-lg bg-blue-50">
              <h3 className="font-medium mb-3">Event Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
                <div>
                  <p><strong>Event:</strong> EMS Trade Fair 2025</p>
                  <p><strong>Dates:</strong> June 26 - July 6, 2025</p>
                </div>
                <div>
                  <p><strong>Venue:</strong> Malta Fairs and Conventions Centre</p>
                  <p><strong>Location:</strong> Ta' Qali, Malta</p>
                </div>
              </div>
            </div>

            {/* Important Notice */}
            {registration.ticket ? (
              <div className="p-4 border rounded-lg bg-yellow-50">
                <h3 className="font-medium mb-2">Important Notice</h3>
                <ul className="text-sm text-yellow-800 space-y-1">
                  <li>â€¢ Bring a printed copy or show the digital ticket on your phone</li>
                  <li>â€¢ Arrive at least 30 minutes before your preferred session</li>
                  <li>â€¢ Visit our booth at MFCC Main Hall for check-in</li>
                  <li>â€¢ Bring valid ID matching your registration details</li>
                </ul>
              </div>
            ) : (
              <div className="p-4 border rounded-lg bg-blue-50">
                <h3 className="font-medium mb-2">Next Steps</h3>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>â€¢ We'll email you once your EMS customer status is verified</li>
                  <li>â€¢ Your ticket will be generated automatically upon approval</li>
                  <li>â€¢ You'll receive detailed event instructions via email</li>
                  <li>â€¢ Check your registration status anytime using the link below</li>
                </ul>
              </div>
            )}

            {/* Contact Information */}
            <div className="p-4 border rounded-lg bg-gray-50">
              <h3 className="font-medium mb-3">Need Help?</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-gray-600" />
                  <span>support@ems-events.com</span>
                </div>
                <div className="flex items-center gap-2">
                  <Phone className="h-4 w-4 text-gray-600" />
                  <span>+356 2123 4567</span>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-3">
              <Link href="/" className="flex-1">
                <Button variant="outline" className="w-full">
                  <Home className="mr-2 h-4 w-4" />
                  Back to Home
                </Button>
              </Link>
              <Link href="/ticket-status" className="flex-1">
                <Button className="w-full">
                  <CheckCircle className="mr-2 h-4 w-4" />
                  Check Status Later
                </Button>
              </Link>
            </div>

            <div className="text-center">
              <p className="text-xs text-gray-500">
                Keep this page bookmarked for easy access to your registration details
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}