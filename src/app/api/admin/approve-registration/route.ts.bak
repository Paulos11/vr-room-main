// src/app/api/admin/approve-registration/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

const ApprovalSchema = z.object({
  registrationId: z.string(),
  action: z.enum(['APPROVE', 'REJECT']),
  notes: z.string().optional()
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { registrationId, action, notes } = ApprovalSchema.parse(body)

    // Find the registration
    const registration = await prisma.registration.findUnique({
      where: { id: registrationId }
    })

    if (!registration) {
      return NextResponse.json(
        { success: false, message: 'Registration not found' },
        { status: 404 }
      )
    }

    if (registration.status !== 'PENDING') {
      return NextResponse.json(
        { success: false, message: 'Registration is not pending approval' },
        { status: 400 }
      )
    }

    if (action === 'APPROVE') {
      // Update registration to COMPLETED and add admin notes
      const updatedRegistration = await prisma.registration.update({
        where: { id: registrationId },
        data: {
          status: 'COMPLETED',
          adminNotes: notes,
          verifiedAt: new Date(),
          verifiedBy: 'admin' // You can pass actual admin ID here
        }
      })

      // Generate ticket for approved registration
      const ticket = await prisma.ticket.create({
        data: {
          registrationId: registrationId,
          ticketNumber: `EMS-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,
          qrCode: `QR-${registrationId}-${Date.now()}`,
          eventDate: new Date('2025-07-26'),
          venue: 'Malta Fairs and Conventions Centre',
          boothLocation: 'EMS Booth - MFCC',
          accessType: 'VIP',
          status: 'GENERATED'
        }
      })

      // Update ticket status to SENT (simulate email sending)
      await prisma.ticket.update({
        where: { id: ticket.id },
        data: {
          status: 'SENT',
          sentAt: new Date()
        }
      })

      // Log approval email
      await prisma.emailLog.create({
        data: {
          registrationId,
          emailType: 'REGISTRATION_APPROVED',
          subject: 'Registration Approved - Your Ticket is Ready',
          recipient: registration.email,
          status: 'SENT'
        }
      })

      return NextResponse.json({
        success: true,
        message: 'Registration approved and ticket generated',
        data: { 
          registration: updatedRegistration, 
          ticket,
          status: 'COMPLETED' 
        }
      })

    } else if (action === 'REJECT') {
      // Update registration to REJECTED
      const updatedRegistration = await prisma.registration.update({
        where: { id: registrationId },
        data: {
          status: 'REJECTED',
          adminNotes: notes,
          verifiedAt: new Date(),
          verifiedBy: 'admin'
        }
      })

      // Log rejection email
      await prisma.emailLog.create({
        data: {
          registrationId,
          emailType: 'REGISTRATION_REJECTED',
          subject: 'Registration Update',
          recipient: registration.email,
          status: 'SENT'
        }
      })

      return NextResponse.json({
        success: true,
        message: 'Registration rejected',
        data: { 
          registration: updatedRegistration,
          status: 'REJECTED' 
        }
      })
    }

  } catch (error) {
    console.error('Error processing approval:', error)
    return NextResponse.json(
      { 
        success: false, 
        message: 'Internal server error',
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
