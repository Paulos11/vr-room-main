// src/lib/ticketService.ts - Updated for multiple tickets
import { TicketGenerator } from './ticketGenerator'
import { prisma } from '@/lib/prisma'

export class TicketService {
  /**
   * Create a new ticket for a registration with sequence number
   */
  static async createTicket(registrationId: string, sequence: number = 1): Promise<any> {
    try {
      // Get registration details
      const registration = await prisma.registration.findUnique({
        where: { id: registrationId },
        include: { tickets: true }
      })

      if (!registration) {
        throw new Error('Registration not found')
      }

      // Generate ticket details
      const ticketData = await TicketGenerator.generateTicket({
        registrationId,
        isEmsClient: registration.isEmsClient
      })

      // Create ticket in database
      const ticket = await prisma.ticket.create({
        data: {
          registrationId,
          ticketNumber: ticketData.ticketNumber,
          qrCode: ticketData.qrCode,
          accessType: ticketData.accessType,
          eventDate: new Date('2025-07-26'),
          venue: 'Malta Fairs and Conventions Centre',
          boothLocation: 'EMS Booth - MFCC',
          status: 'GENERATED',
          ticketSequence: sequence
        }
      })

      return ticket
    } catch (error) {
      console.error('Error creating ticket:', error)
      throw error
    }
  }

  /**
   * Create multiple tickets for a registration
   */
  static async createMultipleTickets(registrationId: string, quantity: number): Promise<any[]> {
    try {
      const tickets = []
      
      for (let i = 1; i <= quantity; i++) {
        const ticket = await this.createTicket(registrationId, i)
        tickets.push(ticket)
        console.log(`Created ticket ${i}/${quantity}: ${ticket.ticketNumber}`)
      }
      
      return tickets
    } catch (error) {
      console.error('Error creating multiple tickets:', error)
      throw error
    }
  }

  /**
   * Generate tickets when registration is approved (for EMS customers)
   */
  static async generateTicketForApprovedRegistration(registrationId: string): Promise<any[]> {
    try {
      // Update registration status to COMPLETED
      await prisma.registration.update({
        where: { id: registrationId },
        data: { 
          status: 'COMPLETED',
          verifiedAt: new Date()
        }
      })

      // Check if tickets already exist
      const existingTickets = await prisma.ticket.findMany({
        where: { registrationId }
      })

      if (existingTickets.length > 0) {
        // Update existing tickets to SENT
        await prisma.ticket.updateMany({
          where: { registrationId },
          data: { 
            status: 'SENT',
            sentAt: new Date()
          }
        })
        return existingTickets
      }

      // Create new ticket (EMS customers get 1 free ticket)
      const tickets = await this.createMultipleTickets(registrationId, 1)

      // Update ticket status to SENT
      await prisma.ticket.updateMany({
        where: { registrationId },
        data: { 
          status: 'SENT',
          sentAt: new Date()
        }
      })

      return tickets
    } catch (error) {
      console.error('Error generating ticket for approved registration:', error)
      throw error
    }
  }

  /**
   * Get all tickets for a registration
   */
  static async getTicketsByRegistration(registrationId: string): Promise<any[]> {
    return await prisma.ticket.findMany({
      where: { registrationId },
      orderBy: { ticketSequence: 'asc' },
      include: {
        registration: {
          select: {
            firstName: true,
            lastName: true,
            email: true,
            phone: true,
            isEmsClient: true
          }
        }
      }
    })
  }

  /**
   * Verify ticket by ticket number
   */
  static async verifyTicket(ticketNumber: string): Promise<any> {
    const ticket = await prisma.ticket.findUnique({
      where: { ticketNumber },
      include: {
        registration: {
          select: {
            firstName: true,
            lastName: true,
            email: true,
            isEmsClient: true,
            status: true
          }
        }
      }
    })

    if (!ticket) {
      return { valid: false, message: 'Ticket not found' }
    }

    if (ticket.registration.status !== 'COMPLETED') {
      return { valid: false, message: 'Registration not completed' }
    }

    return {
      valid: true,
      ticket,
      message: 'Ticket is valid'
    }
  }

  /**
   * Mark ticket as collected at booth
   */
  static async markTicketCollected(ticketNumber: string, collectedBy: string): Promise<any> {
    return await prisma.ticket.update({
      where: { ticketNumber },
      data: {
        status: 'COLLECTED',
        collectedAt: new Date(),
        collectedBy
      }
    })
  }

  /**
   * Check in ticket at event
   */
  static async checkInTicket(ticketNumber: string, checkedInBy: string, notes?: string): Promise<any> {
    const ticket = await prisma.ticket.findUnique({
      where: { ticketNumber }
    })

    if (!ticket) {
      throw new Error('Ticket not found')
    }

    // Create check-in record
    const checkIn = await prisma.ticketCheckIn.create({
      data: {
        ticketId: ticket.id,
        checkedInBy,
        notes: notes || `Checked in at ${new Date().toLocaleString()}`
      }
    })

    // Update ticket status to USED
    await prisma.ticket.update({
      where: { id: ticket.id },
      data: { status: 'USED' }
    })

    return checkIn
  }
}