
// src/components/forms/EnhancedRegistrationForm.tsx - Updated with better error handling
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { toast } from '@/components/ui/use-toast'
import { Loader2, ArrowLeft, ArrowRight, AlertTriangle } from 'lucide-react'

import { CustomerSelectionDialog } from './CustomerSelectionDialog'
import { PersonalInfoStep } from './steps/PersonalInfoStep'
import { EmsCustomerStep } from './steps/EmsCustomerStep'
import { PanelInterestStep } from './steps/PanelInterestStep'
import { TermsStep } from './steps/TermsStep'
import { RegistrationFormData } from '@/types/registration'
import { validateStep, validateAllFields } from '@/utils/formValidation'

export function EnhancedRegistrationForm() {
  const router = useRouter()
  const [showCustomerDialog, setShowCustomerDialog] = useState(true)
  const [currentStep, setCurrentStep] = useState(1)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState<RegistrationFormData>({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    idCardNumber: '',
    isEmsClient: false,
    quantity: 1,
    panelInterest: false,
    acceptTerms: false,
    acceptPrivacyPolicy: false
  })

  const totalSteps = formData.isEmsClient ? 4 : 3

  const handleCustomerTypeSelected = (isEmsClient: boolean) => {
    setFormData(prev => ({ 
      ...prev, 
      isEmsClient,
      quantity: isEmsClient ? 1 : (prev.quantity || 1) // EMS customers get 1 free ticket
    }))
    setShowCustomerDialog(false)
  }

  const handleInputChange = (field: keyof RegistrationFormData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleNext = () => {
    const isStepValid = validateStep(currentStep, formData)
    
    if (isStepValid) {
      setCurrentStep(prev => Math.min(prev + 1, totalSteps))
    } else {
      toast({
        title: "Please fix the errors",
        description: "Check the highlighted fields and fix any errors before continuing.",
        variant: "destructive",
      })
    }
  }

  const handlePrevious = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }

  const handleSubmit = async () => {
    // Validate all fields before submission
    const validation = validateAllFields(formData)
    
    if (!validation.isValid) {
      toast({
        title: "Please fix the following errors:",
        description: (
          <div className="mt-2">
            <ul className="list-disc list-inside space-y-1">
              {validation.errors.map((error, index) => (
                <li key={index} className="text-sm">{error}</li>
              ))}
            </ul>
          </div>
        ),
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      // Clean the data before sending
      const cleanedData = {
        ...formData,
        firstName: formData.firstName.trim(),
        lastName: formData.lastName.trim(),
        email: formData.email.trim().toLowerCase(),
        phone: formData.phone.trim(),
        idCardNumber: formData.idCardNumber.trim(),
        quantity: formData.isEmsClient ? 1 : (formData.quantity || 1)
      }

      console.log('Submitting registration data:', cleanedData)

      const response = await fetch('/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(cleanedData),
      })

      const result = await response.json()
      console.log('Registration response:', result)

      if (response.ok && result.success) {
        toast({
          title: "Registration successful!",
          description: formData.isEmsClient 
            ? "Your registration is pending approval." 
            : "Redirecting to payment...",
        })

        if (formData.isEmsClient) {
          router.push(`/registration/pending?id=${result.data.id}`)
        } else {
          router.push(`/payment?id=${result.data.id}`)
        }
      } else {
        toast({
          title: "Registration Failed",
          description: result.message || "Something went wrong. Please try again.",
          variant: "destructive",
        })
      }
    } catch (error) {
      console.error('Registration error:', error)
      toast({
        title: "Registration Failed",
        description: "Network error. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  const renderStepContent = () => {
    // Adjust step numbers based on customer type
    const actualStep = formData.isEmsClient ? currentStep : (currentStep === 1 ? 1 : currentStep + 1)

    switch (actualStep) {
      case 1:
        return <PersonalInfoStep formData={formData} onUpdate={handleInputChange} />
      case 2:
        return <EmsCustomerStep formData={formData} onUpdate={handleInputChange} />
      case 3:
        return <PanelInterestStep formData={formData} onUpdate={handleInputChange} />
      case 4:
        return <TermsStep formData={formData} onUpdate={handleInputChange} />
      default:
        return null
    }
  }

  const getTotalCost = () => {
    if (formData.isEmsClient) return 'Free'
    return `â‚¬${((formData.quantity || 1) * 50).toFixed(2)}`
  }

  const isCurrentStepValid = () => {
    return validateStep(currentStep, formData)
  }

  if (showCustomerDialog) {
    return <CustomerSelectionDialog open={showCustomerDialog} onCustomerTypeSelected={handleCustomerTypeSelected} />
  }

  return (
    <div className="w-full max-w-md mx-auto">
      <Card className="shadow-lg">
        <CardHeader className="pb-3">
          <CardTitle className="text-xl text-center">
            {formData.isEmsClient ? 'EMS Customer' : 'VIP Registration'}
          </CardTitle>
          <CardDescription className="text-center text-sm">
            {formData.isEmsClient 
              ? 'Free VIP access - pending verification'
              : `${formData.quantity || 1} VIP ticket(s) - ${getTotalCost()}`
            }
          </CardDescription>
          
          {/* Compact Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-1.5 mt-3">
            <div 
              className="bg-blue-600 h-1.5 rounded-full transition-all duration-300" 
              style={{ width: `${(currentStep / totalSteps) * 100}%` }}
            />
          </div>
          <div className="flex justify-between text-xs text-gray-500 mt-1">
            <span>Step {currentStep}/{totalSteps}</span>
            <span>{Math.round((currentStep / totalSteps) * 100)}%</span>
          </div>
        </CardHeader>
        
        <CardContent className="px-4 pb-4">
          <div className="min-h-[320px]">
            {renderStepContent()}
          </div>
          
          {/* Step Validation Warning */}
          {!isCurrentStepValid() && currentStep > 1 && (
            <div className="flex items-center gap-2 p-2 bg-orange-50 border border-orange-200 rounded mt-4">
              <AlertTriangle className="h-4 w-4 text-orange-600" />
              <p className="text-xs text-orange-800">
                Please complete all required fields above
              </p>
            </div>
          )}
          
          {/* Compact Navigation */}
          <div className="flex justify-between mt-6 gap-3">
            <Button 
              variant="outline" 
              onClick={handlePrevious}
              disabled={currentStep === 1}
              size="sm"
              className="flex-1"
            >
              <ArrowLeft className="mr-1 h-4 w-4" />
              Back
            </Button>
            
            {currentStep < totalSteps ? (
              <Button 
                onClick={handleNext}
                size="sm"
                className="flex-1"
                disabled={!isCurrentStepValid()}
              >
                Next
                <ArrowRight className="ml-1 h-4 w-4" />
              </Button>
            ) : (
              <Button 
                onClick={handleSubmit}
                disabled={isSubmitting || !isCurrentStepValid()}
                size="sm"
                className="flex-1"
              >
                {isSubmitting && <Loader2 className="mr-1 h-4 w-4 animate-spin" />}
                {isSubmitting ? 'Submitting...' : 
                 formData.isEmsClient ? 'Submit' : `Pay ${getTotalCost()}`}
              </Button>
            )}
          </div>
          
          {/* Customer Type Change */}
          <div className="text-center mt-3">
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => setShowCustomerDialog(true)}
              className="text-gray-500 text-xs h-8"
            >
              Change customer type
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}